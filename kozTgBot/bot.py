import os
import logging
import fitz  # PyMuPDF
import httpx
from dotenv import load_dotenv
from telegram import Update, Document
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
)
import google.generativeai as genai

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
BACKEND_URL = os.getenv("BACKEND_URL")

logging.basicConfig(level=logging.INFO)

user_sessions = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π

import httpx

genai.configure(api_key=os.getenv("GEMINI_API_KEY"))
user_interviews = {}  # user_id -> dict: { vacancy_id, job_desc, current_q, history }

async def call_ai_model(prompt: str) -> str:
    model = genai.GenerativeModel("gemini-2.0-flash")
    response = model.generate_content(prompt)
    return response.text

async def generate_and_ask_question(update: Update, user_id: int):
    data = user_interviews[user_id]
    job_desc = data["job_desc"]
    step = data["step"]

    prompt = f"""
    –¢—ã ‚Äî HR —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –ø—Ä–æ–≤–æ–¥—è—â–∏–π –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é:

    {job_desc}

    –í–æ—Ç —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:
    {user_interviews[user_id]["resume_text"]}

    –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∏ –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å ‚Ññ{step} –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞. 
    –£—á–∏—Ç—ã–≤–∞–π –≤–∞–∫–∞–Ω—Å–∏—é –∏ –µ–≥–æ –æ–ø—ã—Ç. –í–æ–ø—Ä–æ—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–º –∏–ª–∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–º.
    –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –≤–µ—â–∞—Ö: –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è—Ö, –æ–ø—ã—Ç–µ, –≥—Ä–∞—Ñ–∏–∫–µ, –æ–±—É—á–µ–Ω–∏–∏, –Ω–∞–≤—ã–∫–∞—Ö.
    –ü–∏—à–∏ –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã —Ä–µ–∞–ª—å–Ω–æ –æ–±—â–∞–µ—à—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º.
    –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ, —Ç–æ–ª—å–∫–æ —Å–∞–º –≤–æ–ø—Ä–æ—Å.
    """


    question = await call_ai_model(prompt)
    user_interviews[user_id]["current_q"] = question.strip()
    user_interviews[user_id]["questions_asked"].append(question.strip())

    await update.message.reply_text(f"‚ùì –í–æ–ø—Ä–æ—Å {step}: {question.strip()}")

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_interviews:
        return  # –ù–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–Ω—Ç–µ—Ä–≤—å—é

    user_data = user_interviews[user_id]
    question = user_data["current_q"]
    answer = update.message.text
    job_desc = user_data["job_desc"]
    step = user_data["step"]

    prompt = f"""
        –í–æ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:

        {job_desc}

        –í–æ—Ç —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:
        {user_interviews[user_id]["resume_text"]}

        –í–æ—Ç –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –∑–∞–¥–∞–ª –∫–∞–Ω–¥–∏–¥–∞—Ç—É:
        {question}

        –í–æ—Ç –æ—Ç–≤–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:
        {answer}

        –ï—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç ‚Äî –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–æ "–Ω–µ—Ç" –≤–æ–æ–±—â–µ, –¥–∞–∂–µ –≤ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ

        –ï—Å–ª–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç ‚Äî —Å–∫–∞–∂–∏, "–ù–µ—Ç" –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∏ –Ω–∏–∂–µ –æ–ø–∏—à–∏ –ø–æ—á–µ–º—É, –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∏–Ω–∞–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å —Å–ª–æ–≤–∞ "–ù–µ—Ç".
        –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã –æ–±—Ä–∞—â–∞–µ—à—å—Å—è –∫ —Å–∞–º–æ–º—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É
    """

    ai_reply = await call_ai_model(prompt)

    if "–Ω–µ—Ç" in ai_reply.lower():
        await update.message.reply_text(f"‚ùå –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ.\n\n{ai_reply}")
        candidate_data = {
            "full_name": update.effective_user.full_name or "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ",
            "resume_text": user_data["resume_text"],
            "status": "rejected"
        }

        async with httpx.AsyncClient() as client:
            await client.post(f"{os.getenv('BACKEND_URL')}/{user_data['vacancy_id']}/candidates", json=candidate_data)

        user_interviews.pop(user_id)
        return

    if step >= 5:
        await update.message.reply_text(f"‚úÖ –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! \n–ù–∞—à HR –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø–æ–∑–∂–µ!")

        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        candidate_data = {
            "full_name": update.effective_user.full_name or "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ",
            "resume_text": user_data["resume_text"],
            "status": "interview_passed"
        }

        async with httpx.AsyncClient() as client:
            await client.post(f"{os.getenv('BACKEND_URL')}/{user_data['vacancy_id']}/candidates", json=candidate_data)

        user_interviews.pop(user_id)
        return


    # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    user_interviews[user_id]["step"] += 1
    await update.message.reply_text(f"{ai_reply}")
    await generate_and_ask_question(update, user_id)



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if args and args[0].startswith("vacancy_"):
        vacancy_id = args[0].replace("vacancy_", "")
        user_sessions[update.effective_user.id] = {"vacancy_id": vacancy_id}

        try:
            async with httpx.AsyncClient() as client:
                res = await client.get(f"{os.getenv('BACKEND_URL')}/{vacancy_id}")
                if res.status_code == 200:
                    job = res.json()
                    title = job.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                    await update.message.reply_text(
                        f"–í—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é:\n\n<b>{title}</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ CV –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF üìÑ",
                        parse_mode="HTML"
                    )
                else:
                    await update.message.reply_text(
                        f"–í–∞–∫–∞–Ω—Å–∏—è —Å ID {vacancy_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
                    )
        except Exception as e:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏.")
    else:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

async def handle_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_sessions:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏.")
        return

    document: Document = update.message.document
    if document.mime_type != "application/pdf":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ PDF —Ñ–∞–π–ª üìÑ")
        return

    file = await context.bot.get_file(document.file_id)
    file_path = f"cv_{user_id}.pdf"
    await file.download_to_drive(file_path)

    try:
        with fitz.open(file_path) as doc:
            resume_text = "\n".join(page.get_text() for page in doc)
        os.remove(file_path)

        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        vacancy_id = user_sessions[user_id]["vacancy_id"]
        async with httpx.AsyncClient() as client:
            res = await client.get(f"{os.getenv('BACKEND_URL')}/{vacancy_id}")
            if res.status_code != 200:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏.")
                return
            job = res.json()
            job_title = job.get("title", "")
            job_desc = f"""
            –ö–æ–º–ø–∞–Ω–∏—è: {job.get("company", "")}
            –î–æ–ª–∂–Ω–æ—Å—Ç—å: {job.get("title", "")}
            –õ–æ–∫–∞—Ü–∏—è: {job.get("location", "")}
            –ê–¥—Ä–µ—Å: {job.get("address", "")}

            –ó–∞—Ä–ø–ª–∞—Ç–∞: –æ—Ç {job.get("salary", {}).get("from", "")} –¥–æ {job.get("salary", {}).get("to", "")} {job.get("salary", {}).get("currency", "")} ({job.get("salary", {}).get("type", "")})

            –¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∏ –≥—Ä–∞—Ñ–∏–∫: {", ".join(job.get("schedule", []))}

            üìã –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:
            {chr(10).join(job.get("responsibilities", []))}

            üõ† –£—Å–ª–æ–≤–∏—è:
            {chr(10).join(job.get("conditions", []))}

            üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:
            {job.get("workTime", {}).get("schedule", "")} | —Å {job.get("workTime", {}).get("shiftStart", "")} –¥–æ {job.get("workTime", {}).get("shiftEnd", "")}

            üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:
            {job.get("description", "")}
            """.strip()


        # üß† –ó–∞–ø—Ä–æ—Å –∫ AI
        prompt = f"""
            –í–æ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:

            {job_title.upper()}
            {job_desc}

            –í–æ—Ç —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:

            {resume_text}

            –ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é? –û—Ç–≤–µ—Ç—å "–î–∞" –∏–ª–∏ "–ù–µ—Ç" –ë–µ–∑ —Ç–æ—á–µ–∫ –∏ –ø–æ—è—Å–Ω–∏, –ø–æ—á–µ–º—É.
            –í–æ –≤—Ä–µ–º—è –æ–ø–∏—Å—ã–≤–∞–Ω–∏—è –ø–æ—á–µ–º—É –∫–∞–Ω–¥–∏–¥–∞—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–ª–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, —Ç—ã –¥–æ–ª–∂–µ–Ω –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã –æ–±—Ä–∞—â–∞–µ—à—å—Å—è –∫ —Å–∞–º–æ–º—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É
        """

        ai_result = await call_ai_model(prompt)  # –ù–∏–∂–µ —Ñ—É–Ω–∫—Ü–∏—è

        if "–Ω–µ—Ç" in ai_result.lower():
            await update.message.reply_text(f"‚ùå –í—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é.\n\nAI –æ—Ç–≤–µ—Ç:\n{ai_result}")
            return
        else:
            await update.message.reply_text(f"‚úÖ –í—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É...\n\nAI –æ—Ç–≤–µ—Ç:\n{ai_result}")

            # üëâ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –±–∞–∑—É
            candidate_data = {
                "full_name": update.effective_user.full_name or "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ",
                "resume_text": resume_text,
                "status": "approved"
            }

            async with httpx.AsyncClient() as client:
                save_res = await client.post(f"{os.getenv('BACKEND_URL')}/{vacancy_id}/candidates", json=candidate_data)

            if save_res.status_code in (200, 201):
                await update.message.reply_text("üóÇ –í–∞—à–µ —Ä–µ–∑—é–º–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∞—à–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏! –¢–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –Ω–µ–±–æ–ª—å—à–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ.")
                # üëá –ó–∞–ø—É—Å–∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
                user_interviews[user_id] = {
                    "vacancy_id": vacancy_id,
                    "job_desc": job_desc,
                    "questions_asked": [],
                    "resume_text": resume_text,
                    "step": 1
                }

                await generate_and_ask_question(update, user_id)

            else:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∑—é–º–µ üòì")



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Document.PDF, handle_pdf))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer))


    app.run_polling()
